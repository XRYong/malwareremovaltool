import os
import tkinter as tk
from tkinter import Label, PhotoImage, Button, ttk
from os import system
from PIL import Image, ImageTk
import ctypes, sys
from os.path import isfile
from sys import exit
from time import sleep
from urllib.request import urlretrieve
from webbrowser import open as webopen
from platform import release
from concurrent.futures import ThreadPoolExecutor
from contextlib import closing
from os import path, startfile
from os.path import isfile
from os import startfile
from time import perf_counter
from urllib.parse import urlparse
from platform import system as platform
import ctypes
from requests import Session
from requests.adapters import HTTPAdapter
from rich.progress import Progress
from tkinter import messagebox

def is_admin():
    try:
        return ctypes.windll.shell32.IsUserAnAdmin()
    except:
        return False

if is_admin():
    pass
else:
    # Re-run the program with admin rights
    ctypes.windll.shell32.ShellExecuteW(None, "runas", sys.executable, " ".join(sys.argv), None, 1)

def resource_path(relative_path):
    base_path=getattr(sys,'_MEIPASS',os.path.dirname(os.path.abspath(__file__)))
    return os.path.join(base_path, relative_path)

class cmds():
    def mrt():
        system('mrt.exe /F:Y')
        return

is_admin()

##Create Variables
diruser = path.expanduser('~')
diruserdlf = diruser + ('\Downloads\WindowsUtility')

def dl(url, fname, dname):
    if dname == None:
        dname = fname
    filepath = path.join(diruserdlf, fname)
    # Parse the URL and convert it to https.
    url = (urlparse(url))._replace(scheme='https').geturl()

    headers = {'Accept-Encoding': 'gzip, deflate',
                'User-Agent': 'Mozilla/5.0',
                'cache_control': 'max-age=600',
                'connection': 'keep-alive'}
        
    session = Session()

    response = session.head(url, headers=headers)
    with Progress() as progress:

        with open(filepath, "wb") as file:
            response = session.get(url, stream=True)
            chunk_size = 1024  # You can adjust this value as needed

                    #writes the data and updates the progress bar every 1kib
            for data in response.iter_content(chunk_size=chunk_size):
                file.write(data)

    try:
        startfile(filepath)
    except:
        messagebox.showerror(title='Failed to start file!', message='Failed to start file!')

class homescreen():
    def pagem():
        home = tk.Tk()
        home.geometry('900x600')
        home.resizable(0, 0)
        home.columnconfigure(0, weight=1)
        home.columnconfigure(1, weight=3)
        home.columnconfigure(2, weight=5)
        home.columnconfigure(3, weight=1)
        home.columnconfigure(4, weight=3)
        home.columnconfigure(5, weight=51)
        home.rowconfigure(0, weight=1)
        home.rowconfigure(1, weight=1)
        home.rowconfigure(3, weight=1)
        home.rowconfigure(4, weight=50)
        home.title('Windows Utility V10.0.1')
        nomalware = Image.open(resource_path("antimalware.png")).resize((160,160))
        nm = ImageTk.PhotoImage(nomalware)
        nomalware1 = ttk.Label(home, image=nm)
        nomalware1.grid(column=0, row=0, sticky=tk.NW, padx=5, pady=5)
        nomalware2 = Button(home, text='Enable Anti-Virus', font=('arial', 23), relief='groove', command=lambda: cmds.mrt()).grid(column=1, row=0, padx=5, pady=5)
        nomalware3 = Label(home, text='Enable Windows\'s default Anti-Virus(Auto-Scan Mode), May Take Some Time For Program To Load...', font=('arial', 10)).grid(column=1, row=1, sticky=tk.NSEW, padx=5, pady=5)
        home.mainloop()
        return

startwin = tk.Tk()
dir = os.getcwd()
startwin.geometry('600x500')
starticon = PhotoImage(file = resource_path("start.png"))
sstarticon = Label(startwin, image=starticon)
sstarticon.pack()
startwin.overrideredirect(1)
startwin.eval('tk::PlaceWindow . center')
startwin.after(1000, lambda:startwin.destroy())
startwin.mainloop()

eula = tk.Tk()
eula.title('Accept Eula')
eula.update_idletasks()
eula.geometry('600x500')
askaccepteula1 = Label(eula, text = 'Use at your own risk!', font=('Ariel', 25)).pack(pady=20)
askaccepteula2 = Button(eula, text = 'Accept?', command = lambda: [eula.destroy(), homescreen.pagem()], font=('ariel', 20), relief='groove').pack(ipadx=5, ipady=5, expand=True)
askaccepteula3 = Button(eula, text = 'Decline?', command = lambda: [eula.destroy()], font=('ariel', 20), relief='groove').pack(ipadx=5, ipady=5, expand=True)
eula.iconbitmap(False, (resource_path("start.ico")))
eula.update_idletasks()
eula.resizable(False,False)
eula.eval('tk::PlaceWindow . center')
eula.mainloop()